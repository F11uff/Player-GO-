// Code generated by MockGen. DO NOT EDIT.
// Source: mocks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBMocks is a mock of DBMocks interface.
type MockDBMocks struct {
	ctrl     *gomock.Controller
	recorder *MockDBMocksMockRecorder
}

// MockDBMocksMockRecorder is the mock recorder for MockDBMocks.
type MockDBMocksMockRecorder struct {
	mock *MockDBMocks
}

// NewMockDBMocks creates a new mock instance.
func NewMockDBMocks(ctrl *gomock.Controller) *MockDBMocks {
	mock := &MockDBMocks{ctrl: ctrl}
	mock.recorder = &MockDBMocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBMocks) EXPECT() *MockDBMocksMockRecorder {
	return m.recorder
}

// QueryRow mocks base method.
func (m *MockDBMocks) QueryRow(query string, args ...interface{}) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBMocksMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBMocks)(nil).QueryRow), varargs...)
}
